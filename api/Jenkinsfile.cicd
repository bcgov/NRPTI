#!groovy
import bcgov.GitHubHelper

// ------------------
// Pipeline Variables
// ------------------

// Stash Names
def COVERAGE_STASH = 'test-coverage'

// --------------------
// Declarative Pipeline
// --------------------
pipeline {
  agent any

  environment {
    // Enable pipeline verbose debug output if greater than 0
    DEBUG_OUTPUT = 'false'

    // Get projects/namespaces from config maps
    DEV_PROJECT = new File('/var/run/configs/ns/project.dev').getText('UTF-8').trim()
    TEST_PROJECT = new File('/var/run/configs/ns/project.test').getText('UTF-8').trim()
    PROD_PROJECT = new File('/var/run/configs/ns/project.prod').getText('UTF-8').trim()
    TOOLS_PROJECT = new File('/var/run/configs/ns/project.tools').getText('UTF-8').trim()

    // Get application config from config maps
    REPO_OWNER = new File('/var/run/configs/jobs/repo.owner').getText('UTF-8').trim()
    REPO_NAME = new File('/var/run/configs/jobs/repo.name').getText('UTF-8').trim()
    APP_NAME = new File('/var/run/configs/jobs/app.name').getText('UTF-8').trim()
    APP_DOMAIN = new File('/var/run/configs/jobs/app.domain').getText('UTF-8').trim()

    // JOB_NAME should be the pull request/branch identifier (i.e. 'pr-5')
    JOB_NAME = JOB_BASE_NAME.toLowerCase()

    // SOURCE_REPO_* references git repository resources
    SOURCE_REPO_RAW = "https://raw.githubusercontent.com/${REPO_OWNER}/${REPO_NAME}/master"
    SOURCE_REPO_REF = "pull/${CHANGE_ID}/head"
    SOURCE_REPO_URL = "https://github.com/${REPO_OWNER}/${REPO_NAME}.git"

    // SonarQube Endpoint URL
    SONARQUBE_URL_INT = 'http://sonarqube:9000'
    SONARQUBE_URL_EXT = "https://sonarqube-${TOOLS_PROJECT}.${APP_DOMAIN}"
  }

  options {
    parallelsAlwaysFailFast()
  }

  stages {
    stage('Initialize') {
      agent any
      steps {
        // Cancel any running builds in progress
        timeout(10) {
          echo "Cancelling previous ${APP_NAME}-${JOB_NAME} builds in progress..."
          abortAllPreviousBuildInProgress(currentBuild)
        }

        script {
          if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }

    stage('Tests') {
      agent any
      steps {
        script {
          dir('demo-sq') {
            try {
              timeout(10) {
                echo 'Installing NPM Dependencies...'
                sh 'npm ci'

                echo "Testing ${APP_NAME}-${JOB_NAME}..."
                sh 'npm run test'
              }
            } catch (e) {
              echo "${APP_NAME}-${JOB_NAME} failed"
              throw e
            }
          }
        }
      }
      post {
        success {
          stash name: COVERAGE_STASH, includes: 'demo-sq/coverage/**'

          echo 'All Tests passed'
        }
        failure {
          echo 'Some Tests failed'
        }
      }
    }

    stage('Publish') {
      agent any
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(TOOLS_PROJECT) {
              if(DEBUG_OUTPUT.equalsIgnoreCase('true')) {
                echo "DEBUG - Using project: ${openshift.project()}"
              }

              unstash COVERAGE_STASH

              echo 'Performing SonarQube static code analysis...'
              sh """
              sonar-scanner \
                -Dsonar.host.url='${SONARQUBE_URL_INT}' \
                -Dsonar.projectKey='${REPO_NAME}-${JOB_NAME}' \
                -Dsonar.projectName='Demo SQ (${JOB_NAME.toUpperCase()})'
              """
            }
          }
        }
      }
    }
  }
}
