swagger: '2.0'
info:
  version: '0.0.0'
  title: NRPTI API
host: localhost:3000
basePath: /api
tags:
  - name: 'search'
    description: 'Search operations'
    externalDocs:
      description: 'Find out more about our API'
      url: 'https://github.com/bcgov/NRPTI.git'
  - name: 'record'
    description: 'Operations on Record objects'
    externalDocs:
      description: 'Find out more about our API'
      url: 'https://github.com/bcgov/NRPTI.git'
  - name: 'task'
    description: 'Operations on tasks'
    externalDocs:
      description: 'Find out more about our API'
      url: 'http://github.com/bcgov/nrptiapi.git'
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
      For accessing the API, a valid JWT token must be passed in all the queries in
      the 'Authorization' header.

      A valid JWT token is generated by the API automatically via redirect through Keycloak.

      The following syntax must be used in the 'Authorization' header: Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json

definitions:
  ### Record Type Definitions
  RecordRequestObject:
    type: object
  RecordResponseObject:
    type: object
  dataSourceType:
    type: string
    description: 'Supported data sources'
    example: 'epic'
    enum: &dataSourceType
      - epic
      - nris-epd
      - cors-csv
  recordType:
    type: string
    description: 'Supported record types'
    example: 'Order'
    enum: &recordType
      - AdministrativePenalty
      - AdministrativeSanction
      - Agreement
      - Certificate
      - ConstructionPlan
      - CourtConviction
      - Inspection
      - ManagementPlan
      - Order
      - Permit
      - RestorativeJustice
      - SelfReport
      - Ticket
      - Warning

  ### Document Type Definitions
  DocumentRequestObject:
    type: object
  DocumentResponseObject:
    type: object
    properties:
      signedUrl:
        type: string
        example: 'A pre-signed URL.'

  ### Search Definitions
  SearchObject:
    type: object
    properties:
      keywords:
        type: string
        example: 'Project Name'
  SearchDataSetParams:
    type: string
    description: 'Optional datasets to search on in the DB'
    example: ['Order']
    enum: &searchDataSetParams
      - AdministrativePenalty
      - AdministrativeSanction
      - Agreement
      - Certificate
      - ConstructionPlan
      - CourtConviction
      - Inspection
      - ManagementPlan
      - Order
      - Permit
      - RestorativeJustice
      - SelfReport
      - Ticket
      - Warning
  SearchSubsetParams:
    type: string
    description: 'Optional datasets to search on in the DB'
    example: ['description']
    enum: &SearchSubsetParams
      - description
      - dateIssued
      - location
      - recordName
      - issuedTo
  SearchSortByFields:
    type: string
    description: 'Optional fields to sort by (prefixed with + or - for order)'
    example: +dateAdded,-startDate
    enum: &searchSortByFields
      - +dateIssued
      - -dateIssued
      - +dateAdded
      - -dateAdded
      - +startDate
      - -startDate
      - +displayName
      - -displayName
      - +documentType
      - -documentType

  ### Task Definitions
  TaskObject:
    type: object
    example: 'A task object'
    required: [dataSourceType]
    properties:
      params:
        type: object
        example: '{"dateSince": "30-10-2019"}'
      dataSourceType:
        type: string
        description: 'The datasource to update'
        example: 'epic'
        enum: *dataSourceType
      recordTypes:
        type: array
        description: 'Specific record types to update.  If not provided, all supported types will be updated.'
        items:
          type: string
          enum: *recordType

  ### Common Definitions
  Token:
    type: object
    properties:
      token:
        type: string

  Error:
    type: object
    properties:
      message:
        type: string

paths:
  /search:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on search Route'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/SearchObject'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - search
      summary: 'Get a list of things related to these keywords'
      operationId: protectedGet
      description: 'Retreiving items relating to the given keywords.'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:lng
        - admin:nrced
        - admin:bcmi
      parameters:
        - in: query
          name: _id
          description: 'Grab (via _id) specific document'
          type: string
          required: false
          items:
            type: string
        - in: query
          name: keywords
          description: 'Full Text Search based on keywords'
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: populate
          description: 'Populate Project object ID'
          type: boolean
          required: false
        - in: query
          name: dataset
          description: 'Dataset to search on'
          type: array
          items:
            type: string
            enum: *searchDataSetParams
          required: false
        - in: query
          name: _schemaName
          description: 'Schema to search on'
          type: string
          required: false
        - in: query
          name: project
          description: 'Project to specifically query'
          type: string
          required: false
        - in: query
          name: pageNum
          description: 'Page number to skip to.'
          type: number
          required: false
        - in: query
          name: pageSize
          description: '# Records to limit'
          type: number
          required: false
        - in: query
          name: sortBy
          description: 'Fields to sort by.'
          required: false
          type: array
          items:
            type: string
            enum: *searchSortByFields
        - in: query
          name: and
          collectionFormat: multi
          required: false
          description: 'Query: multiple parameter instances are supported using AND.'
          type: string
        - in: query
          name: or
          collectionFormat: multi
          required: false
          description: 'Query: multiple parameter instances are supported using OR.'
          type: string
        - in: query
          name: nor
          collectionFormat: multi
          required: false
          description: 'Query: multiple parameter instances are supported using NOR.'
          type: string
        - in: query
          name: subset
          description: 'Fields that you want to filter your keyword search on.'
          type: array
          items:
            type: string
            enum: *SearchSubsetParams
          required: false
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/SearchObject'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /public/search:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on search Route'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/SearchObject'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - search
      summary: 'Get a list of things related to these keywords'
      operationId: publicGet
      description: 'Retrieving items relating to the given keywords.'
      parameters:
        - in: query
          name: _id
          description: 'Grab (via _id) specific document'
          type: string
          required: false
          items:
            type: string
        - in: query
          name: keywords
          description: 'Full Text Search based on keywords'
          type: string
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: populate
          description: 'Populate Project object ID'
          type: boolean
          required: false
        - in: query
          name: dataset
          description: 'Dataset to search on'
          type: array
          items:
            type: string
            enum: *searchDataSetParams
          required: false
        - in: query
          name: _schemaName
          description: 'Schema to search on'
          type: string
          required: false
        - in: query
          name: project
          description: 'Project to specifically query'
          type: string
          required: false
        - in: query
          name: pageNum
          description: 'Page number to skip to.'
          type: number
          required: false
        - in: query
          name: pageSize
          description: '# Records to limit'
          type: number
          required: false
        - in: query
          name: sortBy
          description: 'Fields to sort by.'
          required: false
          type: array
          items:
            type: string
            enum: *searchSortByFields
        - in: query
          name: and
          collectionFormat: multi
          required: false
          description: 'Query: multiple parameter instances are supported using AND.'
          type: string
        - in: query
          name: or
          collectionFormat: multi
          required: false
          description: 'Query: multiple parameter instances are supported using OR.'
          type: string
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/SearchObject'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  ###
  ### Task Routes
  ###
  /task:
    x-swagger-router-controller: import-task
    options:
      tags:
        - task
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on authenticated task route'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - task
      summary: 'Create a new Task'
      operationId: protectedCreateTask
      description: 'Authenticated access to create a Task Worker'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: task
          in: body
          description: 'Flag to import records'
          required: true
          schema:
            $ref: '#/definitions/TaskObject'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /task/csv:
    x-swagger-router-controller: import-csv-task
    options:
      tags:
        - csv, task
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on authenticated csv task route'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - csv, task
      summary: 'Create a new csv Task'
      operationId: protectedCreateTask
      description: 'Authenticated access to create a csv Task Worker'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      consumes:
        - multipart/form-data
      parameters:
        - name: dataSourceType
          in: formData
          type: string
          enum: *dataSourceType
          required: true
          description: 'The datasource to update'
        - name: recordType
          in: formData
          type: string
          enum: *recordType
          required: true
          description: 'Specific record type to update'
        - name: upfile
          in: formData
          type: file
          required: true
          description: "The csv file to import"
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  ###
  ### Record Routes
  ###
  /record/{recordId}/publish:
    x-swagger-router-controller: record-controller
    options:
      tags:
        - record
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on authenticated record route'
      parameters:
        - name: recordId
          in: path
          description: '_id of record to publish'
          required: true
          type: string
        - name: record
          in: body
          description: 'record to publish'
          required: true
          schema:
            $ref: '#/definitions/RecordRequestObject'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - record
      summary: 'Publish a record'
      operationId: protectedPublish
      description: "Adds the singular instance of the 'public' role to a record."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:nrced
        - admin:lng
        - admin:bcmi
      parameters:
        - name: recordId
          in: path
          description: '_id of record to publish'
          required: true
          type: string
        - name: record
          in: body
          description: 'record to publish'
          required: true
          schema:
            $ref: '#/definitions/RecordRequestObject'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /record/{recordId}/unpublish:
    x-swagger-router-controller: record-controller
    options:
      tags:
        - record
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on authenticated record route'
      parameters:
        - name: recordId
          in: path
          description: '_id of record to publish'
          required: true
          type: string
        - name: record
          in: body
          description: 'record to unpublish'
          required: true
          schema:
            $ref: '#/definitions/RecordRequestObject'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - record
      summary: 'Unpublish a record'
      operationId: protectedUnPublish
      description: "Adds the singular instance of the 'public' role to a record."
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:nrced
        - admin:lng
        - admin:bcmi
      parameters:
        - name: recordId
          in: path
          description: '_id of record to publish'
          required: true
          type: string
        - name: record
          in: body
          description: 'record to unpublish'
          required: true
          schema:
            $ref: '#/definitions/RecordRequestObject'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /record/news/{recordId}:
    x-swagger-router-controller: record-controller
    options:
      tags:
        - record
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on authenticated record route'
      parameters:
        - name: recordId
          in: path
          description: '_id of record to delete'
          required: true
          type: string
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - record
      summary: 'Delete Record'
      operationId: protectedNewsDelete
      description: 'Authenticated access to delete a News Record'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:lng
      parameters:
        - name: recordId
          in: path
          description: '_id of record'
          required: true
          type: string
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /record:
    x-swagger-router-controller: record-controller
    options:
      tags:
        - task
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on authenticated task route'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - record
      summary: 'Create new record(s)'
      operationId: protectedPost
      description: 'Authenticated access to create a record'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:lng
        - admin:nrced
        - admin:bcmi
      parameters:
        - in: body
          name: data
          description: 'Records in an array that you would like to save'
          required: true
          schema:
            $ref: '#/definitions/RecordRequestObject'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/RecordResponseObject'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - record
      summary: 'Edit record(s)'
      operationId: protectedPut
      description: 'Authenticated access to create a record'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:lng
        - admin:nrced
        - admin:bcmi
      parameters:
        - in: body
          name: data
          description: 'Records in an array that you would like to save'
          required: true
          schema:
            $ref: '#/definitions/RecordRequestObject'
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/RecordResponseObject'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'

  ###
  ### Document Routes
  ###
  /record/{recordId}/document:
    x-swagger-router-controller: document-controller
    options:
      tags:
        - task
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on authenticated task route'
      parameters:
        - name: recordId
          in: path
          description: '_id of record to publish'
          required: true
          type: string
        - name: data
          in: body
          description: 'Data to create a document'
          required: true
          schema:
            $ref: '#/definitions/DocumentRequestObject'
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Document
      summary: 'Create new Document(s)'
      operationId: protectedPost
      description: 'Authenticated access to create a Document and get a signed put URL in return'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:lng
        - admin:nrced
        - admin:bcmi
      consumes:
        - multipart/form-data
      parameters:
        - name: recordId
          in: path
          description: '_id of record the document is associated with'
          required: true
          type: string
        - name: upfile
          in: formData
          description: "The file to upload. If this is present, the file will be uploaded to S3."
          required: false
          type: file
        - name: fileName
          in: formData
          description: "Filename for document/link (Only applies to links)"
          required: true
          type: string
        - name: url
          in: formData
          description: "Url for links. If this is present, a link will be created."
          required: false
          type: string
      responses:
        '200':
          description: 'Success'
          schema:
            $ref: '#/definitions/DocumentResponseObject'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /record/{recordId}/document/{docId}:
    x-swagger-router-controller: document-controller
    options:
      tags:
        - task
      summary: 'Pre-flight request'
      operationId: protectedOptions
      description: 'Options on authenticated task route'
      parameters:
        - name: recordId
          in: path
          description: '_id of record'
          required: true
          type: string
        - name: docId
          in: path
          description: '_id of document'
          required: true
          type: string
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Document
      summary: 'Delete Document'
      operationId: protectedDelete
      description: 'Authenticated access to create a Document and get a signed put URL in return'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:lng
        - admin:nrced
        - admin:bcmi
      parameters:
        - name: recordId
          in: path
          description: '_id of record the document is associated with'
          required: true
          type: string
        - name: docId
          in: path
          description: '_id of document we want to delete'
          required: true
          type: string
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
  /document/{docId}/signedurl:
    x-swagger-router-controller: document-controller
    options:
      tags:
        - document
      summary: 'Pre-flight request'
      operationId: protectedGetS3SignedURL
      description: 'Options on authenticated document route'
      parameters:
        - name: docId
          in: path
          description: '_id of document to get an s3 signed url for'
          required: true
          type: string
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - document
      summary: 'Get a signed s3 url for an uploaded document'
      operationId: protectedGetS3SignedURL
      description: 'Gets an s3 signed url for a document uploaded to s3.'
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - admin:lng
        - admin:nrced
        - admin:bcmi
      parameters:
        - name: docId
          in: path
          description: '_id of document to get an s3 signed url for'
          required: true
          type: string
      responses:
        '200':
          description: 'Success'
        '403':
          description: 'Access Denied'
          schema:
            $ref: '#/definitions/Error'
